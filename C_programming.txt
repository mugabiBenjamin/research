    char characterName[] = "Benny";
    int characterAge = 70;

    printf("There once was a man named %s\n", characterName);
    printf("he was %d years old.\n", characterAge);

    characterAge = 100;
    printf("He really liked the name %s.\n", characterName);
    printf("but did not like being %d years\n", characterAge);

-------------------------- Variables

int age = 40;
double cgpa = 4.95;
char = 'A';
char phrase[] = "Giraffe Academy";

-------------------------- Printf

format specifiers like %d %c %s (%f for float and double) 	// Order matters...
	printf("%d\n",500);	// 500
	printf("My favourite number is %d\n", 500);
	printf("My favourite %s is %d\n", "number", 500);

    int favNum = 50;
    char favChar = 'A';
    printf("My favourite %s is %d %s my favourite character is letter %c\n", "number", favNum, "and", favChar);

-------------------------- Working with numbers

    int num = 100;
    
    printf("%d\n", num);
    printf("Float + float: %f\n", 8.9 + 0.101);
    printf("Integer + integer: %d\n", 8 + 1);
    printf("Integer / float with: %f\n", 5 / 4.0);

    printf("%f\n", pow(2,3));   // 8.000000
    printf("%f\n", sqrt(36));   // 6.000000
    printf("%f\n", ceil(3.14));   // 4.000000
    printf("%.1f\n", floor(3.14));       // 3.0
    printf("%.3f\n", trunc(3.14));       // 3.000

-------------------------- Constants

    const int MINS_PER_HOUR = 60;
    printf("%d\n", MINS_PER_HOUR);

/////////////////////////////////////////////////////////////////////////

    const int NUM = 5;
    printf("%d\n", NUM);

-------------------------- Getting User Input

    int age;
    printf("Enter your age: ");
    scanf("%d", &age);
    printf("You are %d years old\n", age);

    double cgpa;
    printf("Enter your cgpa: ");
    scanf("%lf", &cgpa);
    printf("You cgpa is %.2f\n", cgpa);

    char grade;
    printf("Enter your grade: ");
    scanf("%c", &grade);
    printf("You grade is %c\n", grade);

    char name[20];
    printf("Enter your  name: ");
    scanf("%s", name);			//Limitation: can't print text after space
    printf("You name is %s\n", name);

    char name[20];
    printf("Enter your  name: ");
    fgets(name, 20, stdin);
    printf("You name is %s", name); 	// Prints a new line upon pressing Enter key

-------------------------- Building a basic calculator

    double firstNumber, secondNumber;
    printf("Enter the first number: ");
    scanf("%lf", &firstNumber);
    printf("Enter the second number: ");
    scanf("%lf", &secondNumber);

    printf("Answer is: %.2f\n", firstNumber + secondNumber);

-------------------------- Building a Mad Libs Game

    char color[20];
    char pluralNoun[20];
    char celebrityF[20];
    char celebrityL[20];

    printf("Enter a color: ");
    scanf("%s", color);
    printf("Enter a plural noun: ");
    scanf("%s", pluralNoun);
    printf("Enter a celebrity: ");
    scanf("%s%s", celebrityF, celebrityL);

    printf("\nRoses are %s\n", color);
    printf("%s are blue\n", pluralNoun);
    printf("I love %s %s\n", celebrityF, celebrityL);

-------------------------- Arrays

    int luckyNumbers[] = {4, 8, 15, 16, 23, 42};
    luckyNumbers[1] = 200;

    //	Alternatively

    int luckyNumbers[3];
    luckyNumbers[0] = 4;
    luckyNumbers[1] = 8;
    luckyNumbers[2] = 15;
    luckyNumbers[3] = 16;
    printf("%d\n", luckyNumbers[0]);

-------------------------- Functions

int main()
{
    printf("Top\n");
    sayHi();
    printf("Bottom\n");
    return 0;
}

void sayHi(){
    printf("Hello User\n");
}

///////////////////////////////////////////////////////////////////////// Improved

int main()
{
    sayHi("Benjamin\n");
    sayHi("Mercy\n");
    sayHi("Harmony\n");
    sayHi("Joy\n");
    return 0;
}

void sayHi(char name[]){
    printf("Hello %s", name);
}

///////////////////////////////////////////////////////////////////////// Improved+

int main()
{
    sayHi("Benjamin", 40);
    sayHi("Mercy", 30);
    sayHi("Harmony", 20);
    sayHi("Joy", 10);
    return 0;
}

void sayHi(char name[], int age)
{
    printf("Hello %s, you're %d years old.\n", name, age);
}

-------------------------- Return Statement

double cube(double num){
    return num * num * num;     // return breaks out of the function
}

int main()
{
    printf("Answer: %.2f\n", cube(3.0));
    return 0;
}

///////////////////////////////////////////////////////////////////////// Prototyping

double cube(double num);     // Prototypig

int main()
{
    printf("Answer: %.2f\n", cube(2.0));
    return 0;
}

double cube(double num){
    return num * num * num;
}

-------------------------- If Statements

int max(int num1, int num2){
    int result;
    if(num1 > num2){
        result = num1;
    } else {
        result = num2;
    }
    return result;
}

int main()
{
    printf("The max is: %d\n", max(5, 10));
    return 0;
}

/////////////////////////////////////////////////////////////////////////

int max(int num1, int num2, int num3){
    int result;
    if(num1 >= num2 && num1 >= num3){
            result = num1;
    } else if (num2 >= num1 && num2 >= num3){
        result = num2;
    } else {
        result = num3;
    }
    return result;
}

int main()
{
    printf("The max is: %d\n", max(10, 2, 3));
    return 0;
}

-------------------------- Building a better calculator

    double num1, num2;
    char oper;

    printf("Enter a number: ");
    scanf("%lf", &num1);
    printf("Enter operator: ");
    scanf(" %c", &oper);		// Put a space before the %c in scanf
    printf("Enter a number: ");
    scanf("%lf", &num2);

    if(oper == '+'){
        printf("%.2f\n", num1 + num2);
    } else if(oper == '-'){
        printf("%.2f\n", num1 - num2);
    } else if(oper == '/'){
        printf("%.2f\n", num1 / num2);
    } else if(oper == '*'){
        printf("%.2f\n", num1 * num2);
    } else{
        printf("\nInvalid operator, please enter again\n");
    }

-------------------------- Switch Statements

    char grade = 'A';

    switch(grade){
    case 'A':
        printf("You did great\n");
        break;
    case 'B':
        printf("You did alright\n");
        break;
    case 'C':
        printf("You did poorly\n");
        break;
    case 'D':
        printf("You did very bad\n");
        break;
    case 'F':
        printf("You failed\n");
        break;
    default:
         printf("Invalid grade, please enter again!\n");
    }

    return 0;

-------------------------- Struct

    struct Student student1;
    student1.age = 22;
    student1.cgpa = 4.9;
    strcpy(student1.name, "Jimmy");
    strcpy(student1.major, "Tech");

    printf("Name: %s\n", student1.name);
    printf("Major: %s\n", student1.major);
    printf("Age: %d\n", student1.age);
    printf("Cgpa: %.2f\n", student1.cgpa);

    struct Student student2;
    student2.age = 25;
    student2.cgpa = 4.0;
    strcpy(student2.name, "Edward");
    strcpy(student2.major, "Business");

    printf("\nName: %s\n", student2.name);
    printf("Major: %s\n", student2.major);
    printf("Age: %d\n", student2.age);
    printf("Cgpa: %.2f\n", student2.cgpa);


-------------------------- While loops

    int index = 1;
    while(index <= 5) {
        printf("%d\n", index);
        index += 1; 
    }


    int index = 4;
    while(index >= 0) {
        printf("%d\n", index);
        index--;
    }

	
    int index = 4;      // do while loop executes before checking the conditon
    do {
        printf("%d\n", index);
        index--;
    } while(index >= 0); 

-------------------------- Building a guessing game

    int secretNum = 5;
    int guess;
    int guessCount = 0;

    while(guess != secretNum) {
        printf("Enter a number: ");
        scanf("%d", &guess);
        guessCount +=1;
      }
    printf("\nYou win!\n");
    printf("Number of guesses: %d time(s)\n", guessCount);

///////////////////////////////////////////////////////////////////////// Improved

    int secretNum = 5;
    int guess;
    int guessCount = 0;
    int guessLimit = 3;
    int outOfGuesses = 0;

    while(guess != secretNum && outOfGuesses == 0) {
        if(guessCount < guessLimit) {
            printf("Enter a number: ");
            scanf("%d", &guess);
            guessCount++;
        } else {
            outOfGuesses = 1;
        }
    }

    if(outOfGuesses == 1){
        printf("\nYou're out of guesses!\n");
        printf("You lose!!!\n");
    }  else {
    printf("\nYou win!\n");
    }

    return 0;

-------------------------- For loops

    int j;
    for(j = 1; j <= 5; j++){
        printf("%d\n", j);
    }

/////////////////////////////////////////////////////////////////////////

    int luckyNums[] = {4, 8, 15, 16, 23, 42};
    int j;

    for(j = 0; j < 6; j++){
        printf("%d\n", luckyNums[j]);
    }

-------------------------- 2D Array & Nested Loops

     int nums[3][2] = {
                     {1, 2},
                     {3, 4},
                     {5, 6}
                    };
    printf("%d\n", nums[0][0]);     // 1
    printf("%d\n", nums[1][1]);     // 4
    printf("\n");

    int i, j;
    for(i = 0; i < 3; i++){
        for(j = 0; j < 2; j++){
            printf("%d,", nums[i][j]);
        }
        printf("\n");
    }

-------------------------- Memory Addressses

     int age = 30;
     double gpa = 4.5;
     char grade = 'A';

     printf("Age: %p\nGpa: %p\nGrade: %p\n", &age, &gpa, &grade);    // Printing physical memory address

-------------------------- Pointers

    int age = 30;
    int * pAge = &age;
    double gpa = 4.5;
    double * pGpa = &gpa;
    char grade = 'A';
    char * pGrade = &grade;  


-------------------------- Dereferencing Pointers

    int age = 30;
    int *pAge = &age;

    printf("%d\n", *pAge);      // Prints 30 *dereferencing
    printf("%d\n", *&age);      // Prints 30 *dereferencing
    printf("%d\n", &*&age);      // Prints 6422036
    printf("%d\n", *&*&age);      // Prints 30 *dereferencing
    printf("%p\n", pAge);      // Prints 000000000061FE14
    printf("%p\n", &age);      // Prints 000000000061FE14
    printf("%d", age);      // Prints 30 *normally

-------------------------- Writing Files

    FILE * fpointer = fopen("employees.txt", "w");	// w for write, it overwrites as well

    fprintf(fpointer, "Jimmy, Salesman\nPheobe, Receptionist\nNasser, Accounatnt");

    fclose(fpointer);

/////////////////////////////////////////////////////////////////////////

    FILE * fpointer = fopen("employees.txt", "a");	// a for append

    fprintf(fpointer, "\nKelly, Customer Service");

    fclose(fpointer);

-------------------------- Reading Files

    char line[255];
    FILE * fpointer = fopen("employees.txt", "r");	// r for read

    fgets(line, 255, fpointer);     // prints the first line
    fgets(line, 255, fpointer);     // prints the second line
    fgets(line, 255, fpointer);     // prints the third line
    printf("%s", line);

    fclose(fpointer);

-------------------------- Random

If number is divisible by 5
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    if(num % 5 == 0){
        printf("Number is divisible\n");
    } else {
        printf("Number is not divisible\n");
    }

/////////////////////////////////////////////////////////////////////////

Continue and break
    int num;
    // int count = 0
    for(num = 1; num <= 50; num++){
        if(num % 2 == 0){
             //if(num == 10 || num == 20){
                //continue; // skips 10 and 20
             //}
            // if(num == 22){
                // break;
            // }
            printf("%d\n", num);
        }
    }

/////////////////////////////////////////////////////////////////////////

goto Label
    int i;

    for(i = 1; i <= 20; i++){
        if(i == 20){
            goto Label;
        }
        printf("i is %d\n", i);
    }

    Label:
        printf("This is the end\n");

/////////////////////////////////////////////////////////////////////////

Finding the Average of 3 numbers
    int num1, num2, num3;
    float average;
    int itemNums = 3;

    printf("Enter the first number: ");
    scanf("%d", &num1);
    printf("Enter the second number: ");
    scanf("%d", &num2);
    printf("Enter the third number: ");
    scanf("%d", &num3);

    average = (float)(num1 + num2 + num3) / itemNums;
    printf("The Average is %f\n", average);

/////////////////////////////////////////////////////////////////////////

Remainder incremented using increment operator
    int number, remainder;

    printf("Enter a number: ");
    scanf("%d", &number);

    remainder = number % 3;
    remainder++;

    printf("The remainder overall remainder is %d\n", remainder);

/////////////////////////////////////////////////////////////////////////












-------------------------- Explicit conversion

    float div = (float) 5 / 2;
    printf("%f\n", div);	// 2.500000

/////////////////////////////////////////////////////////////////////////

    int num1 = 5;
    int num2 = 2;
    float sum = (float) num1 / num2;
    printf("\n%f\n", sum);	// 2.500000

/////////////////////////////////////////////////////////////////////////

    // Set the maximum possible score in the game
    int maxScore = 500;

    // The actual score of the user
    int userScore = 420;

    /* Calculate the percentage of the user's score to the maximum score
    	Convert userScore to float to make sure that the division is accurate
     */
    float percentage = (float) userScore / maxScore * 100.0;

    // Print the percentage
    printf("User's percentage is %.2f\n", percentage);	// 84.00

    return 0;
}

-------------------------- Boolean

    int value = 10 > 90;

    if(value == 1){
        printf("True\n");
    } else{
        printf("False\n");
    }

    // printf("%d\n", 10 > 9);     // Return 1 (true)

/////////////////////////////////////////////////////////////////////////

    int value = 10 > 90;

    switch(value){
    case 1:
        printf("True\n");
        break;
    default:
        printf("False\n");
    }

/////////////////////////////////////////////////////////////////////////

    int x = 10;
    int y = 9;
    printf("%d", x > y);  // Returns 1

    printf("%d\n", 10 == 10);      // Returns 1
    printf("%d\n", 10 == 15);      // Returns 0
    printf("%d\n", 5 == 55);      // Returns 0

/////////////////////////////////////////////////////////////////////////

#include <stdbool.h>	// Remember to use while working with bool

    bool isHamburgerTasty = true;
    bool isPizzaTasty = true;

    // Find out if both hamburger and pizza are tasty
    printf("%d\n", isHamburgerTasty == isPizzaTasty);		// Returns 1

///////////////////////////////////////////////////////////////////////// Short hand If 

    int time = 20;
    (time < 18) ? printf("Good day\n") : printf("Good evening\n");

-------------------------- Switch statements #2

    int day = 5;

    switch(day){
    case 1:
        printf("Today is a Monday\n");
        break;
    case 2:
        printf("Today is a Tuesday\n");
        break;
    case 3:
        printf("Today is a Wednesday\n");
        break;
    case 4:
        printf("Today is a Thursday\n");
        break;
    case 5:
        printf("Today is a Friday\n");
        break;
    case 6:
        printf("Today is a Saturday\n");
        break;
    case 7:
        printf("Today is a Sunday\n");
        break;
    default:
        printf("Looking forward to a weekend\n");
    }

/////////////////////////////////////////////////////////////////////////

    char grade = 'B';

    switch(grade) {
      case 'A' :
         printf("Excellent!\n" );
         break;
      case 'B' :
         printf("Nice\n" );
         break;
      case 'C' :
         printf("Well done\n" );
         break;
      case 'D' :
         printf("You passed\n" );
         break;
      case 'F' :
         printf("Better try again\n" );
         break;
      default :
         printf("Invalid grade\n" );
   }
   printf("Your grade is %c\n", grade );

-------------------------- While loop - Real life

    int dice = 1;

    while(dice <= 6){
        if(dice < 6){
            printf("No Yatzy\n");
        } else {
            printf("Yatzy!\n");
        }
        dice += 1;
    }

-------------------------- While loop - Real life

    int number = 2;
    int i;

    for(i = 1; i <= 10; i++){
        printf("%d x %d = %d\n", number, i, number * i);
    }

-------------------------- For loop - Real life

    int number = 2;
    int i;

    for(i = 1; i <= 10; i++){
        printf("%d x %d = %d\n", number, i, number * i);
    }

-------------------------- C Break and Continue

    int i;
    for(i = 1; i <= 10; i++){
            if(i == 4){
                break;
            }
        printf("%d\n", i);
    }


    int i;
    for(i = 1; i <= 10; i++){
            if(i == 4){
                continue;
            }
        printf("%d\n", i);
    }

/////////////////////////////////////////////////////////////////////////

    int i = 0;
    while(i < 10){
        if(i == 4){
            break;
        }
        printf("%d\n", i);
        i++;
    }


    int i = 0;
    while(i < 10){
        if(i == 4){;
            i++;
            continue;
        }
        printf("%d\n", i);
        i++;
    }

-------------------------- Loop through an Arrays

   int myNumbers[] = {25, 50, 75, 100};
   int i;

   for(i = 0; i < 4; i++){
    printf("%d\n", myNumbers[i]);
   }

///////////////////////////////////////////////////////////////////////// Convetional way

   int myNumbers[] = {25, 50, 75, 100};
   int length = sizeof(myNumbers) / sizeof(myNumbers[0]);
   int i;  
   
   for(i = 0; i < length; i++){
    printf("%d\n", myNumbers[i]);
   }

///////////////////////////////////////////////////////////////////////// Average

   int myNumbers[] = {10, 25, 50, 75, 100};
   // printf("%d\n", sizeof(myNumbers));    // Prints 20 (5 x 4bytes)
   printf("%d\n", sizeof(myNumbers) / sizeof(myNumbers[0]));    // Prints 5


    int ages[] = {20, 22, 18, 35, 48, 26, 87, 70};
    float avg, sum = 0;
    int i;

    int length = sizeof(ages) / sizeof(ages[0]);
    for(int i = 0; i < length; i++){
        sum += ages[i];
    }

    avg = sum / length;
    printf("The average age is: %.2f\n", avg);


-------------------------- Multidimensional Arrays

    int matrix[2][3] = {{1, 4, 2}, {3, 6, 8}};

    int i, j;
    for(i = 0; i < 2; i++){
        for(j = 0; j < 3; j++){
            printf("%d,", matrix[i][j]);
        }
        printf("\n");
    }

-------------------------- Strings

    char carName[] = "Volvo";
    int i;

    for(i = 0; i < 5; i++){
        printf("%c\n", carName[i]);
    }

///////////////////////////////////////////////////////////////////////// Improved

    char carName[] = "Volvo";
    int length = sizeof(carName) / sizeof(carName[0]);
    int i;

    for(i = 0; i < length; i++){
        printf("%c\n", carName[i]);
    }

/////////////////////////////////////////////////////////////////////////

    char greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\0'};
    printf("%s\n", greetings);		// \0 isa null terminating character, tells C the end of the line

/////////////////////////////////////////////////////////////////////////

    char greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\0'};
    char greetings2[] = "Hello World!";

    printf("%lu\n", sizeof(greetings));     // Prints 13
    printf("%lu\n", sizeof(greetings2));     // Prints 13

/////////////////////////////////////////////////////////////////////////

    char message[] = {"Good to see you,"};
    char fname[] = {"John"};

    printf("%s %s!\n", message, fname);

-------------------------- Functions

include the <string.h> header file in your program

    char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    printf("%d\n", strlen(alphabet));

/////////////////////////////////////////////////////////////////////////

    char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    printf("%d\n", strlen(alphabet));   // 26
    printf("%d\n", sizeof(alphabet));   // 27
    // sizeof also includes the \0 character when counting

/////////////////////////////////////////////////////////////////////////

    char alphabet[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    printf("%d\n", strlen(alphabet));   // 26
    printf("%d\n", sizeof(alphabet));   // 50 in bytes

///////////////////////////////////////////////////////////////////////// Concatenation

    char str1[20] = "Hello ";
    char str2[] = "World!";

    strcat(str1, str2);

    printf("%s\n", str1);
str1 should be large enough to store the result of the two strings combined (20 in our example)

///////////////////////////////////////////////////////////////////////// Copying String

    char str1[20] = "Hello World!";
    char str2[20];

    strcpy(str2, str1);

    printf("%s\n", str2);
str2 should be large enough to store the copied string (20 in our example)

///////////////////////////////////////////////////////////////////////// Comparing

    char str1[] = "Hello";
    char str2[] = "Hello";
    char str3[] = "Hi";

    printf("%d\n", strcmp(str1, str2));    // Prints 0, for equal
    printf("%d\n", strcmp(str1, str3));    // Prints -1, for not equal

-------------------------- User Input

    int myNum;
    char myChar;

    printf("Type a number AND a character and press enter: \n");
    scanf("%d %c", &myNum, &myChar);

    printf("Your number is: %d\n", myNum);
    printf("Your character is: %c\n", myChar);

///////////////////////////////////////////////////////////////////////// String Input

    char firstName[30];

    printf("Enter your first name: \n");
    scanf("%s", firstName);
    printf("Hello %s", firstName);

///////////////////////////////////////////////////////////////////////// String Input (both names)

    char fullName[30];

    printf("Type your full name: \n");
    fgets(fullName, sizeof(fullName), stdin);

    printf("Hello %s", fullName);

-------------------------- Pointers

    int myAge = 20;
    int* ptr = &myAge;

    printf("%d\n", myAge);    // 20
    printf("%p\n", &myAge);    // 000000000061FE14
    printf("%p\n", ptr);    // 000000000061FE14

///////////////////////////////////////////////////////////////////////// Dereferencing

    int myAge = 20;
    int* ptr = &myAge;

    printf("%d\n", myAge);    // 20
    printf("%d\n", *&myAge);    // 20, deref
    printf("%p\n", &myAge);    // 000000000061FE14
    printf("%p\n", ptr);    // 000000000061FE14

///////////////////////////////////////////////////////////////////////// Looping through

    int myNumbers[4] = {25, 50, 75, 100};
    int i;

    for(i = 0; i < 4; i++){
        printf("%p\n", myNumbers[i]);
    }
    
    // 0000000000000019
    // 0000000000000032
    // 000000000000004B
    // 0000000000000064