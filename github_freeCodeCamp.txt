############################# Git commands

clone    # Bring a repository that is hosted somewhere like github into a folder on your local machine
add      # Track your files and changes in git
commit   # Save your files in git
push     # Upload git commands to a remote repo, like github
pull     # download changes from remote repo to your local  machine, the opposite of push

-----

   git pull                    # Pulls changes (files) added through github to working dir on local machine
   git clone <url> fruit       # Pulls a repo and creates a folder called <fruit>
   git fetch                   # Pulls changes (files) added through github to local machine and not in local dir, type "git merge" after to pull changes to working dir




############################# README file Formatting and Indentation

>>>> 1. Headers

   # Main Title
   ## Subtitle
   ### Sub-subtitle
   #### Level 4 Heading
   ##### Level 5 Heading
   ###### Level 6 Heading

   - Headers are used to structure the README into sections like "Introduction," "Features," "Installation," etc.
-------------------------------------------------------


>>>> 2. Lists

   - -, * or + for unordered lists
   - 1., 2., 3. for ordered lists

   - Unordered lists: Features, dependencies, or bullet points.
   - Ordered lists: Steps in a procedure or ranked items.
-------------------------------------------------------


>>>> 3. Indentation

   - > for blockquotes
   - Use block quotes for important notes, tips, or referencing external content.

   ```bash
   # This is a bash command and a comment specifically
   npm install
   ```

   Use single backticks (`) for inline code.
   Run the `npm install` command to install dependencies.

   - Code blocks: Commands, configuration files, or code snippets.
   - Inline code: Highlighting filenames, commands, or specific code segments.
-------------------------------------------------------


>>>> 4. Other

   **Bold Text**
   *Italic Text*
   ***Bold and Italic***

   - ~~strikethrough text~~ for strikethrough text       # Use to mark completed tasks or deprecated content

   - --- or *** for horizontal lines

   - Use horizontal rules to separate major sections or topics in a long README.
-------------------------------------------------------


>>>> 5. Links 

   - [Visit Google](https://google.com)                  <!-- Normal Link -->
   - [Jump to Installation Section](#installation)       <!-- Anchor Link, #installation is a section-title -->
   - [Link Text](https://example.com "Optional Title")   <!-- Link with title -->
-------------------------------------------------------


>>>> 6. Images

   ![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png?raw=true)    # Hosted images
   ![My Screenshot](./assets/screenshot.png?raw=true)       # Local images

   Task list (checkbox)

   - [ ] Task not done
   - [x] Task completed

   - Use for project roadmaps, to-do lists, or PR checklists.
-------------------------------------------------------


>>>> 7. Escaping charcaters

   \*This will not italicize.*            # Won't italicize
   \# This will not create a header.      # Won't create a header
-------------------------------------------------------


>>>> 8. Tables

   | Column 1 | Column 2 | Column 3 |
   |----------|----------|----------|
   | Row 1    | Data 1   | Data 2   |
   | Row 2    | Data 3   | Data 4   |
-------------------------------------------------------


>>>> 9. Footnotes

   Here is a statement with a footnote.[^1]

   [^1]: This is the footnote text.
-------------------------------------------------------


>>>> 10. Collapsible sections

   <details>
   <summary>Click to expand</summary>
   Hidden content goes here.
   </details>

   - Use for lengthy logs, explanations, or optional content.
-------------------------------------------------------




############################# SSH keys

   > ssh-keygen -t rsa -b 4096 -C "your-email"			# Easier to use
   > ssh-keygen -t ed25519 -C "your-email"
   > just press enter
   > Enter file in which to save the key (/home/adduser/.ssh/id_rsa):
   > Incase you change the name of the key, the terminal saves the key in the current folder and not in /.ssh/

   > cd
   > ls -la
   > cd .ssh
   > ls -l
   > more id_rsa.pub
   > copy the id_rsa.pub key and paste in on githhub via SSH key in settings
   > eval "$(ssh-agent -s)"
   > ssh-add ~/.ssh/id_rsa

-----

   > ssh-keygen -t ed25519 -C "your-email"
   > Enter (/home/adduser/.ssh/ed25519): git101
   > cat git101.pub 
   > eval "$(ssh-agent -s)"
   > ssh-add ~desktop/git/git101




############################# Starting a repo locally

   > mkdir <new-repo> && cd <new-repo>
   > git init				         
   > Make changes
   > git add .
   > git commit -m "Initial commit"
   > git branch -M main
   > git remote add origin <repo-url>
   > git push -u origin master




############################# Undoing things with checkout, revert, reset

   git checkout <SHA code>		   # Switch to the specified commit
   git checkout main			      # Switch back to get to present

   git revert <SHA code> 		               # Creates a new commit that undoes the changes introduced by the specified commit.
   git revert <SHA-of-the-revert-commit>     # To undo a git revert

   -----

   git reset <SHA code>                   # Moves the HEAD pointer to a specific commit (<SHA>), altering your commit history.

   ---- To recover git reset

   git add .
   git commit -m "undo reset"

   ----

   git reset <SHA code> --hard	            # Removes commits, can't be gotten back

   git push --force                
   git push --force-with-lease               # Safer, checks that no one else has pushed changes to the remote branch since your last pull

   - Use git revert for shared branches (e.g., main) to avoid disrupting history.
   - Use git reset for local branches or when youâ€™re sure no one else relies on the branch, as it rewrites history.




############################# Setting default branch

   git config --global init.defaultBranch main
   git config --global --get init.defaultBranch	to verify




############################# Including file in gitignore that initially wasn't

   git rm -rf --cached .		# Clear cache incase changes don't reflect on GitHub, then:
   git add .
   git commit -m "message"
   git push


   git log --all --graph		# Graphical view




############################# Forking to pull request

Step 1. Fork repo


Step 2. Clone repo 

   git clone <repository_url>
-----------------------------------------------------


Step 3.  Set the Original Repository as an Upstream Remote

   git remote add upstream <original_repository_url>     # Add the original repository as a remote
   git remote -v                                         # Verify remotes
-----------------------------------------------------


Step 4. Create a New Branch

   git checkout -b <featurebranch_name>
   git add .                                             # To stage all changes
-----------------------------------------------------


Step 5. Push to the feature branch

   git push -u origin <feature_branch_name>              # To set upstream
-----------------------------------------------------


Step 6. Create Pull Request on GitHub

   - Go to the original repository on GitHub.
   - Click Compare & Create Pull Request.
   - Add a title and description for your PR.
   - Create pull request.
-----------------------------------------------------
      

Step 7. Keep Your Fork Updated (Optional)

   git checkout main                                     # Switch to the main branch

   git fetch upstream                                    # Fetch changes from the original repository
   git merge upstream/main

   git push origin main                                  # Push changes to the main branch of the fork 
-----------------------------------------------------


Step 8. Delete Local Branch

   git branch -d <feature_branch_name>                   # Delete feature branch locally
   git branch -D <feature_branch_name>                   # Delete feature branch locally forcefully regardless of whether it has been merged or not.
   
   git fetch --all                                       # Fetch the latest state from the remote repository
-----------------------------------------------------


Step 9. Delete Remote Branch

   git push origin --delete <feature_branch_name>       # Delete feature branch remotely
-----------------------------------------------------


Step 10. Delete Fork

   Delete the fork on GitHub.
-----------------------------------------------------




############################# Renaming remote repo -> local

   git remote -v                       # To verify

   git remote set-url origin <url>     # Change the origin to a new url

   git remote -v                       # To verify change

   git status                          # Test connection

-----------------------------------------------------

   # From parent directory
      mv old-folder-name new-folder-name
      cd new-folder-name
      git init

-----------------------------------------------------

   git reset --hard HEAD~1                         # Undo last commit to github

   git reset --hard ORIG_HEAD                      # Undo "git reset --hard HEAD~1echo "Cloning repository..." 

   git commit --amend -m "New commit message"      # Rename last commit to text in qoutes
   git push -f

   git rebase -i HEAD~2                            # Rename commit mesage 2 commits back
   ESC > i > type reword > ESC > Ctrl + O > Enter > Ctrl + X   
   Rewrite the commit message > ESC > Ctrl + O > Enter > Ctrl + X



############################# Cloning more than one repo (main and feature branch)

   git clone <URL-of-your-forked-repo>

   git fetch --all                           # Fetch all branches
   
   git branch                                # List all local branches

   git branch -a                             # List all remote branches

   git checkout <feature_branch_name>        # Switch to feature branch

   git checkout main
   git pull origin main

   git checkout <feature_branch_name>
   git pull origin <feature_branch_name>



############################# Different usecases of git add

>>> git add .

   - Adds tracks modified, deleted, new, hidden and subdirectories

>>> git add --all

   - Adds tracks modified, deleted, new, hidden and subdirectories

>>> git add <filename>

   - Adds tracks specific modified, deleted, new, hidden and not subdirectories

>>> git add -u

   - Adds tracks modified, subdirectories, new, hidden and not deleted

>>> git add *

   - Adds tracks modified, deleted, new and not hidden and not subdirectories