########################################

    Sass stands for *Syntactically Awesome Stylesheet*




########################################

/* Define standard variables and values for website */
$bgcolor: lightblue;
$textcolor: darkblue;
$fontsize: 18px;

body {
  background-color: $bgcolor;
  color: $textcolor;
  font-size: $fontsize;
}




######################################## variables

strings, numbers, colors, Booleans, lists, nulls
$variablename: value;

Sass variables are only available at the level of nesting where they are defined.

    $myColor: red;

    h1 {
    $myColor: green;
    color: $myColor;
    }

    p {
    color: $myColor;
    } 

-----

    <h1>Hello World</h1>    // green
    <p>This is a paragraph.</p>    // red

>>>> sass !global

The default behavior for variable scope can be overridden by using the !global switch.
!global indicates that a variable is global, which means that it is accessible on all levels.

    $myColor: red;

    h1 {
    $myColor: green !global;
    color: $myColor;
    }

    p {
    color: $myColor;
    } 

-----

    <h1>Hello World</h1>    // green
    <p>This is a paragraph.</p>    // green

Global variables should be defined outside any rules. It could be wise to define all global variables in its own file, named "_globals.scss", and include the file with the @include keyword.




######################################## Sass Nested Rules and Properties

    nav {
    ul {
        margin: 0;
        padding: 0;
        list-style: none;
    }
    li {
        display: inline-block;
    }
    a {
        display: block;
        padding: 6px 12px;
        text-decoration: none;
    }
    }

>>>>> Sass Nested Properties

    font: {
    family: Helvetica, sans-serif;
    size: 18px;
    weight: bold;
    }

    text: {
    align: center;
    transform: lowercase;
    overflow: hidden;
    }

------

    font-family: Helvetica, sans-serif;
    font-size: 18px;
    font-weight: bold;

    text-align: center;
    text-transform: lowercase;
    text-overflow: hidden;
    



######################################## Sass @import and Partials

The @import directive allows you to include the content of one file in another
@import filename;

    @import "variables";
    @import "colors";
    @import "reset";

-----

> reset.scss
    html, body, ul, ol {
    margin: 0;
    padding: 0;
    }

> standard.scss
    @import "reset";

    body {
    font-family: Helvetica, sans-serif;
    font-size: 18px;
    color: red;
    }

> css output
    html, body, ul, ol {
    margin: 0;
    padding: 0;
    }

    body {
    font-family: Helvetica, sans-serif;
    font-size: 18px;
    color: red;
    }

>>>> Sass Partials

By default, Sass transpiles all the .scss files directly. However, when you want to import a file, you do not need the file to be transpiled directly.

Sass has a mechanism for this: If you start the filename with an underscore, Sass will not transpile it. Files named this way are called partials in Sass.

_filename;

"_colors.scss"
    $myPink: #EE82EE;
    $myBlue: #4169E1;
    $myGreen: #8FBC8F;

Now, if you import the partial file, omit the underscore. Sass understands that it should import the file "_colors.scss":

    @import "colors";

    body {
    font-family: Helvetica, sans-serif;
    font-size: 18px;
    color: $myBlue;
    }
    



######################################## Sass @mixin and @include

- The @mixin directive lets you create CSS code that is to be reused throughout the website.
- The @include directive is created to let you use (include) the mixin.

    @mixin important-text {
    color: red;
    font-size: 25px;
    font-weight: bold;
    border: 1px solid blue;
    }

A tip on hyphens and underscore in Sass: 
Hyphens and underscores are considered to be the same. This means that @mixin important-text { } and @mixin important_text { } are considered as the same mixin!

> scss
    .danger {
    @include important-text;
    background-color: green;
    }

> css
    .danger {
    color: red;
    font-size: 25px;
    font-weight: bold;
    border: 1px solid blue;
    background-color: green;
    }

A mixin can also include other mixins:
    @mixin special-text {
    @include important-text;
    @include link;
    @include special-border;
    }

Passing Variables to a Mixin

    /* Define mixin with two arguments */
    @mixin bordered($color, $width) {
    border: $width solid $color;
    }

    .myArticle {
    @include bordered(blue, 1px);  // Call mixin with two values
    }

    .myNotes {
    @include bordered(red, 2px); // Call mixin with two values
    }

> css
    .myArticle {
    border: 1px solid blue;
    }

    .myNotes {
    border: 2px solid red;
    }

Default Values for a Mixin

scss
    @mixin bordered($color: blue, $width: 1px) {
    border: $width solid $color;
    }

scss
    .myTips {
  @include bordered($color: orange);
}

Using a Mixin For Vendor Prefixes

> scss
    @mixin transform($property) {
    -webkit-transform: $property;
    -ms-transform: $property;
    transform: $property;
    }

    .myBox {
    @include transform(rotate(20deg));
    }

> css
    .myBox {
    -webkit-transform: rotate(20deg);
    -ms-transform: rotate(20deg);
    transform: rotate(20deg);
    }
    



######################################## Sass @extend and Inheritance
The @extend directive lets you share a set of CSS properties from one selector to another

>scss
    .button-basic  {
    border: none;
    padding: 15px 30px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
    }

    .button-report  {
    @extend .button-basic;
    background-color: red;
    }

    .button-submit  {
    @extend .button-basic;
    background-color: green;
    color: white;
    }

> css
    .button-basic, .button-report, .button-submit {
    border: none;
    padding: 15px 30px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
    }

    .button-report  {
    background-color: red;
    }

    .button-submit  {
    background-color: green;
    color: white;
    }

    


######################################## Sass String Functions

Sass strings are 1-based. The first character in a string is at index 1, not 0.

_
quote(string) - Adds quotes to string, and returns the result
quote(Hello world)      // "Hello world!"
_
str-index(string, substring) - Returns the index of the first occurrence of the substring within string.
str-index("Hello world!", "H")      // 1
_
str-insert(string, insert, index) - Returns string with insert inserted at the specified index position.
str-length("Hello world!")      // 12
_
str-slice(string, start, end) - Extracts characters from string; start at start and end at end, and returns the slice.
str-slice("Hello world!", 2, 5)     // "ello"
_
to-lower-case(string) - Returns a copy of string converted to lower case.
to-upper-case("Hello World!")       // "HELLO WORLD!"
_
unique-id()	- Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session).
unique-id()     // tyghefnsv
_
unquote(string)	Removes quotes around string (if any), and returns the result.
unquote("Hello world!")     // Hello world!

    


######################################## Sass List Functions

Sass lists are immutable (they cannot change). So, the list functions that return a list, will return a new list, and not change the original list.
Sass lists are 1-based. The first list item in a list is at index 1, not 0.

    


######################################## Sass Map Functions

In Sass, the map data type represents one or more key/value pairs. Sass maps are immutable (they cannot change). So, the map functions that return a map, will return a new map, and not change the original map.

    


######################################## Sass Introspection Functions

The introspection functions are rarely used when building a stylesheet. However, they are valuable if something does not work properly - to figure out what's going on: like debugging functions.

    


######################################## Sass Color Functions

Sass Set Color Functions
    rgb(red, green, blue)
    rgba(red, green, blue, alpha)
    hsl(hue, saturation, lightness)
    hsla(hue, saturation, lightness, alpha)
    grayscale(color)
    complement(color)
    invert(color, weight)

Sass Get Color Functions
    red(color)
    green(color)
    blue(color)
    hue(color)
    saturation(color)
    lightness(color)
    alpha(color)
    opacity(color)

Sass Manipulate Color Functions
mix(color1, color2, weight)
adjust-hue(color, degrees)
adjust-color(color, red, green, blue, hue, saturation, lightness, alpha)
change-color(color, red, green, blue, hue, saturation, lightness, alpha)
scale-color(color, red, green, blue,  saturation, lightness, alpha)
rgba(color, alpha)
lighten(color, amount)
darken(color, amount)
saturate(color, amount)
desaturate(color, amount)
opacify(color, amount)
fade-in(color, amount)
transparentize(color, amount)
fade-out(color, amount)


