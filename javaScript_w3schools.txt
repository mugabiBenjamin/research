---------------------------- To display time and date

<button type="button" 
onclick="document.getElementById('demo').innerHTML = Date()">
Click me to display Date and Time.</button>

<p id="demo"></p>



---------------------------- Change html content

<p id="demo">JavaScript can change HTML content.</p>

<button type="button" onclick='document.getElementById("demo").innerHTML = "Hello JavaScript!"'>Click Me!</button>



---------------------------- Change html attribute values

<p>JavaScript can change HTML attribute values.</p>

<p>In this case JavaScript changes the value of the src (source) attribute of an image.</p>

<button onclick="document.getElementById('myImage').src='pic_bulbon.gif'">Turn on the light</button>

<img id="myImage" src="pic_bulboff.gif" style="width:100px">

<button onclick="document.getElementById('myImage').src='pic_bulboff.gif'">Turn off the light</button>



---------------------------- Change html style element

<p id="demo">JavaScript can change the style of an HTML element.</p>

<button type="button" onclick="document.getElementById('demo').style.fontSize='35px'">Click Me!</button>



---------------------------- Hide html elements

<p id="demo">JavaScript can hide HTML elements.</p>

<button type="button" onclick="document.getElementById('demo').style.display='none'">Click Me!</button>



---------------------------- Show html elements

<p>JavaScript can show hidden HTML elements.</p>

<p id="demo" style="display:none">Hello JavaScript!</p>

<button type="button" onclick="document.getElementById('demo').style.display='block'">Click Me!</button>



---------------------------- Javascript in body

<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = "My first Javascript";
</script>



---------------------------- Javascript in head

<script>
  function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";}
</script>

<p id="demo">A Paragraph.</p>
<button type="button" onclick="myFunction()">Try it</button>



---------------------------- Js display possibilities

--- Writing into the HTML output using document.write(). --- (The document.write() method should only be used for testing.)

<h2>My First Web Page</h2>
<p>My first paragraph.</p>
<p>
Never call document.write after the document has finished loading.
It will overwrite the whole document.
</p>

<script>
document.write(5 + 6);
</script>
--------------------------------------------------------


--- Using document.write() after an HTML document is loaded, will delete all existing HTML:
<p>Click the button to print the current page.</p>

<button onclick="window.print()">Print this page</button>
--------------------------------------------------------


--- Writing into an alert box, using window.alert().
<script>
window.alert(5 + 6);	// window word is optional -> alert(5 + 6);
</script>
--------------------------------------------------------

--- Writing into the browser console, using console.log().
For debugging purposes

--- Writing into an HTML element, using innerHTML.
--------------------------------------------------------



---------------------------- Js statements

<p id="demo"></p>
<script>
let x, y, z;  // Statement 1
x = 5;        // Statement 2
y = 6;        // Statement 3
z = x + y;    // Statement 4

document.getElementById("demo").innerHTML =
"The value of z is " + z + ".";  
</script>



---------------------------- Semicolons

<p id="demo1"></p>
<script>
let a, b, c;
a = 5; b = 6; c = a + b;
document.getElementById("demo1").innerHTML = c;
</script>



---------------------------- Js code blocks

<button type="button" onclick="myFunction()">Click Me!</button>

<p id="demo1"></p>
<p id="demo2"></p>

<script>
function myFunction() {
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}
</script>



---------------------------- When to Use var, let, or const?

1. Always declare variables
2. Always use const if the value should not be changed
3. Always use const if the type should not be changed (Arrays and Objects)
4. Only use let if you can't use const
5. Only use var if you MUST support old browsers



---------------------------- Js identifiers

Names can contain letters, digits, underscores, and dollar signs.
Names must begin with a letter.
Names can also begin with $ and _ (but we will not use it in this tutorial).
Names are case sensitive (y and Y are different variables).
Reserved words (like JavaScript keywords) cannot be used as names.



---------------------------- One statement, many variables

<p id="demo"></p>

<script>
let person = "John Doe", carName = "Volvo", price = 200;
document.getElementById("demo").innerHTML = carName;
</script>



---------------------------- Js dollar sign $

<p id="demo"></p>

<script>
let $$$ = 2;
let $myMoney = 5;
document.getElementById("demo").innerHTML = $$$ + $myMoney;
</script>



---------------------------- Js underscore _

<p id="demo"></p>

<script>
let _x = 2;
let _100 = 5;
document.getElementById("demo").innerHTML = _x + _100;
</script>