To test whether js runs on your machine, create html file --
<script>
    console.log("Hello world");
</script>

In the browser, press Ctrl + Shift + I or More tools > Developer tools
 

------------------------------------------- Data types and Variables

1. undefined _something that hasn't been defined
2. null _nothing
3. boolean _true or false
4. string _
5. symbol _immutable primitive unique value 
6. number
7. object _stores key value pairs

	variable _allows storage and manipulation of data in a dynamic fashion
	_label that points to data

	----- 3 ways of declearing variables

	var myName = "Ben";	// Used throughout your whole program
	let number = 8;		// Only be used within the scope of where you decleared it
	const PI = 3.14;	// Can never change

------------------------------------------- Storing values with assignment operator

    var a;  // declaring variable
    var b = 2;  // declaring and assigning variable

    console.log(a); // undefined

    a = 7;
    b = a;

    console.log(a); // 7

------------------------------------------- Initializing variables with assignment operator

    var a = 9;  // "var a" is declaring and "= 9" is initializing
	it with the assignment operator, "="

------------------------------------------- Uninitialized Variables

    // Initialize these three variables
    var a = 5;
    var b = 10;
    var c = "I am a";

    // 
    a = a + 1;  // 6
    b = b + 5;  // 15
    c = c + " String!"; // I am a string!

------------------------------------------- Finding the remainder

    var remainder;
    remainder = 11 % 3;

    console.log(remainder);  // 2

------------------------------------------- Compound assigment and augemented format

    var a = 20;
    var b = 20;
    var c = 20;
    var d = 20;

    a += 5; // 25
    b -= 5; // 15
    c *= 5; // 100
    d /= 5; // 4

------------------------------------------- Escape sequences in strings

    /*****
    \'  single qoute
    \"  double qoute
    \\  backslash
    \n  newline
    \r  carriage return
    \t  tab
    \b  baskspace
    \f  form feed
    *****/

    var myStr = "FirstLine\n\t\\SecondLine\nThirdLine";
    console.log(myStr);
    
    // Output
    FirstLine
	    \SecondLine
    ThirdLine

------------------------------------------- Concatenating strings with plus equal operator

    var ourStr = "I come first. " 
    ourStr += "I come second";

    console.log(ourStr);

------------------------------------------- Concatenating strings with plus operator

    var ourStr = "I come first." + " I come second";
    console.log(ourStr);

------------------------------------------- Constructing strings with variables

    var ourName = "freeCodeCamp";
    var ourString = "Hello, our name is " + ourName + ", how\'re you?"

    console.log(ourString);     // Hello, our name is freeCodeCamp, how're you?

///////////////////////////////////////////////////////////////////////////////

    var myName = "Beau";
    var myStr = "My name is " + myName + ", and I am well"

    console.log(myStr);     // My name is Beau, and I am well

------------------------------------------- Appending variables to strings

    var anAdjective = "awesome!";
    var ourStr = "FreeCodeCamp is ";
    ourStr += anAdjective;

    console.log(ourStr)     // FreeCodeCamp is awesome!

///////////////////////////////////////////////////////////////////////////////

    var someAdjective = "worthwhile.";
    var myStr = "Learning to code is ";
    myStr += someAdjective;

    console.log(myStr);     // Learning to code is worthwhile.

------------------------------------------- Finding the length of a string

    var first_name_length = 0;
    var firstName = "Ada";
    first_name_length = firstName.length;

    console.log(first_name_length);     // 3

///////////////////////////////////////////////////////////////////////////////

    var lastNameLength = 0;
    var lastName = "Lovelance";
    lastNameLength = lastName.length;

    console.log(lastNameLength);     // 9

------------------------------------------- Bracket notation to find a character in a string

    var firstLetterOfFirstName = "";
    var firstName = "Ada";
    var lastName = "Lovelance";

    firstLetterOfFirstName = firstName[0];
    var lastLetterOfLastName = lastName[lastName.length - 1];

    console.log(firstLetterOfFirstName);    // first letter, A
    console.log(lastLetterOfLastName);    // last letter, e
    console.log(lastName[lastName.length - 2]);    // second last letter, c
    console.log(lastName[lastName.length - 3]);    // third last letter, n

------------------------------------------- Word blanks game

    function word_blanks(myNoun, myAdjective, myVerb, myAdverb) {
        var result = "";
        result += "The " + myAdjective + " " + myNoun + " " + myVerb + " to the store " + myAdverb

        return result;
    }  

    console.log(word_blanks("dog", "big", "ran", "quickly"));
    console.log(word_blanks("bike", "slow", "flew", "slowly"));

------------------------------------------- Storing multiple values with arrays

    var ourArray = ["Quincy", 23];
    console.log(ourArray);      // [ 'Quincy', 23 ]

------------------------------------------- Nested Arrays

    var ourArray = [["the universe, 42"], ["everything", 101010]];
    console.log(ourArray);      // [ [ 'the universe, 42' ], [ 'everything', 101010 ] ]

------------------------------------------- Acess array data with indexes

    var ourArray = [50, 60, 70];
    var ourData = ourArray[0];

    console.log(ourData);   // 50
    console.log(ourArray[ourArray.length - 1]);   // 70

------------------------------------------- Modify array data witn indexes

    var ourArray = [18, 64, 99];
    ourArray[1] = 45;
    ourArray[0] = 10_000;

    console.log(ourArray);   // [ 10000, 45, 99 ]

------------------------------------------- Access multi-dimensionaal arrays with indexes

    var myArray = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
        [10, 11, 12],
        [13, 14, 15]
    ];

    console.log(myArray);   /** [
        [ 1, 2, 3 ],
        [ 4, 5, 6 ],
        [ 7, 8, 9 ],
        [ 10, 11, 12 ],
        [ 13, 14, 15 ]
    ] */ 
    console.log("\n");

    myData = myArray[0][0]
    console.log(myData);    // 1
    console.log(myArray[2][1]);    // 8
    console.log(myArray[4][2]);    // 15

------------------------------------------- Manipulate Arrays with push()
	// Append data to the end of an array

    var ourArray = ["Stipmson", "J", "cat"];
    ourArray.push(["happy", "joy"]);

    console.log(ourArray);  // [ 'Stipmson', 'J', 'cat', [ 'happy', 'joy' ] ]

------------------------------------------- Manipulate Arrays with pop()
	// Remove and return the last item from an array

    var ourArray = [1, 2, 3];
    var removedFromOurArray = ourArray.pop();
    
    console.log(ourArray);      // [ 1, 2 ]
    console.log(removedFromOurArray);   // 3

///////////////////////////////////////////////////////////////////////////////
    
    var myArray = [["John, 23"], ["cat", 2]];
    var removedFromMyArray = myArray.pop();

    console.log(myArray);   // [ [ 'John, 23' ] ]
    console.log(removedFromMyArray);    // [ 'cat', 2 ]

------------------------------------------- Manipulate Arrays with shift()
	// Remove and return the first item from an array

    var ourArray = ["Stimpson", "J", ["cat"]];
    var removedFromOurArray = ourArray.shift();

    console.log(ourArray);      // [ 'J', [ 'cat' ] ]
    console.log(removedFromOurArray);   // Stimpson  

------------------------------------------- Manipulate Arrays with unshift()
	// Adds an element to the beginning of an array

    var ourArray = ["Stimpson", "J", ["cat"]];
    ourArray.shift();   // Stimpson
    ourArray.unshift("Happy");  // [ 'Happy', 'J', [ 'cat' ] ]

------------------------------------------- Shopping List

    var myList = [
        ["cereal", 3],
        ["milk", 2],
        ["bananas", 3],
        ["juice", 2],
        ["eggs", 12]
    ];

------------------------------------------- Write reusable code with functions

    function our_reusable_func() {
        console.log("Heyya, World!");
    }

    function reusable_func() {
        console.log("Hello there...");
    }

    our_reusable_func();    // Heyya, World!
    reusable_func();    // Hello there...

------------------------------------------- Passing values to functions with arguments

    function our_func(num1, num2) {
        console.log(num1 - num2);
    }
    our_func(10, 5);    // 5

///////////////////////////////////////////////////////////////////////////////

    function funcWithArgs(a, b) {
        console.log(a + b);
    }
    funcWithArgs(15, 5);    // 20

------------------------------------------- Global scope and functions
	// Scope refers to the visibility of variables
	/** Variables defined outside the function block have a global scope, 
variables can be seen everywhere in your code */

    var myGlobal = 10;  // global variable because declare outside function block

    function func1() {
        oopsGlobal = 5;     // global variable because "var" was not used for declaration
    }

    function func2() {
        var output = "";
        if (typeof myGlobal != "undefined") {
            output += "myGlobal: " + myGlobal;
        } 
        if (typeof oopsGlobal != "undefined") {
            output += "\noopsGlobal: " + oopsGlobal;
        }
        console.log(output);
    }

    func1();
    func2();

------------------------------------------- Local scope and functions
	/** Variables declared with in a function have local scope 
	that means they are only visible from with in the function */

    function myLocalScope() {
        var myVar = 5;
        console.log(myVar);
    }

    myLocalScope();     // 5

    console.log(myVar);     // ReferenceError: myVar is not defined
    // because local variable called outside function block

------------------------------------------- Global vs local variables in functions
	/** It is possible to have the local and global variables with the same name
	but the local variable takes precedence over the local variable */

    var outerWare = "T-Shirt";  // global var

    function myOutfit() {
        var outerWare = "Sweater"   // local var

        return outerWare;
    }

    console.log(myOutfit());    // Sweater
    // because local var has higher precedence
    
    console.log(outerWare);    // T-Shirt

------------------------------------------- Return a values from a function with return

    function minusSeven(num) {
        return num - 7;
    }

    console.log(minusSeven(10));   // 3

///////////////////////////////////////////////////////////////////////////////
    
    function timesFive(num) {
        return num * 5;
    }
    
    console.log(timesFive(5));   // 25

------------------------------------------- Understanding undefined value returned from a function

    var sum = 0;    // global var

    function addThree() {
        sum += 3;
        // doesnt return anything because return value is undefined
    }

    console.log(addThree());    // undefined

------------------------------------------- Assignment with a returned value

    var changed = 0;

    function change(num) {
        return (num + 5) / 3;
    }
    
    changed = change(10);
    console.log(changed);   // 5

///////////////////////////////////////////////////////////////////////////////    
    
    var processed = 0;
    
    function processedArg(num) {
        return (num + 3) / 5;
    }
    
    processed = processedArg(7);
    console.log(processed);   // 2

------------------------------------------- Stand in line

    function nextItemInLine(arr, item) {
        arr.push(item);     // add item to the list
        return arr.shift();     // remove and return the first item
    }

    var testArr = [1, 2, 3, 4, 5];

    // JSON.stringify() - changes an array to a string that can easily be printed out on the screen

    console.log("Before: " + JSON.stringify(testArr));  // Before: [1,2,3,4,5]
    console.log(nextItemInLine(testArr, 6));    // 1
    console.log("After: " + JSON.stringify(testArr));   // After: [2,3,4,5,6]

------------------------------------------- Boolean values

    function welcomeToBooleans() {
        return false;
    }

    console.log(welcomeToBooleans());   // false

------------------------------------------- Conditional logic with If statements

    function ourTrueOrFalse(isItTrue) {
        if (isItTrue) {
            return "Yes, it's true";
        }
        return "No, it's false";
    }

    console.log(ourTrueOrFalse(false));     // No, it's false

    function trueOrFalse(wasThatTrue) {
        if (wasThatTrue) {
            return "Yes, that was true";
        }
        return "No, that was false";
    }

    console.log(trueOrFalse(1));        // Yes, that was true
    console.log(trueOrFalse(true));     // Yes, that was true
    console.log(trueOrFalse(0));     // No, that was false

------------------------------------------- Comparision with the equality operator

    function testEqual(val) {
        if (val == 12) {
            return "Equal";
        }
        return "Not equal";
    }

    console.log(testEqual(10));

------------------------------------------- Comparision with the strictly equality operator

    function testStrictly(val) {
        if (val === 7) {
            return "Equal";
        }
        return "Not equal";
    }

    console.log(testStrictly(7));       // Equal
    console.log(testStrictly('7'));     // Not equal

------------------------------------------- Practicse comparing different values

    function compareEquality(a, b) {
        if (a == b) {
            return "Equal";
        }
        return "Not equal";
    }

    console.log(compareEquality(10, "10"));     // Equal
    // performs a type conversion from string to number

------------------------------------------- Comparision with inequality operator

    function testNotEqual(val) {
        if (val != 99) {
            return "Not equal";
        }
        return "Equal";
    }

    console.log(testNotEqual(10));      // Not equal
    // does type conversion

------------------------------------------- Comparision with strictly inequality operator

    function compareEquality(val) {
        if (val !== 17) {
            return "Not equal";
        }
        return "Equal";
    }

    console.log(compareEquality(10));     // Not equal
    // doesnot convert types

------------------------------------------- Comparison with the logical and operators

   function testGreaterThan(val) {
    if ( val > 100) {
        return "Over 100";
    }
    
    if ( val > 10) {
        return "Over 10";
    }

    return "10 or Under";
   }

   console.log(testGreaterThan(10));    // 10 or Under

------------------------------------------- Comparison with the greater than or equal to operator

    function testGreaterOrEqual(val) {
        if ( val >= 20) {
            return "20 or over";
        }
        
        if ( val >= 10) {
            return "10 or over";
        }

        return "Less than 10";
    }

    console.log(testGreaterOrEqual(10));    // 10 or over 

------------------------------------------- Comparison with the less than operator

    function testLessThan(val) { 
        if ( val < 25) {
            return "Under 25";
        }
        
        if ( val < 55) {
            return "Under 55";
        }

        return "55 or over";
    }

    console.log(testLessThan(10));    // Under 25

------------------------------------------- Comparison with the less than or equal to operator

    function testLessOrEqual(val) { 
        if ( val <= 12) {
            return "Smaller than or equal to 12";
        }
        
        if ( val <= 24) {
            return "Smaller than or equal to 24";
        }

        return "More than 24";
    }

    console.log(testLessOrEqual(10));    // Smaller than or equal to 12

------------------------------------------- Comparison with the logical And operator

    function testLogicalAnd(val) {
        if (val >= 25 && val <= 55) {
            return "Yes";
        }
        return "No";
    }

    console.log(testLogicalAnd(10));       // No

------------------------------------------- Comparison with the logical Or operator

    function testLogicalOr(val) {
        if (val < 10 || val > 20) {
            return "Outside";
        }
        return "Inside";
    }

    console.log(testLogicalOr(15));       // Inside

------------------------------------------- Else statements

    function testElse(val) {
        var result = "";

        if (val > 5) {
            result = "Bigger than 5";
        } else {
            result = "5 or smaller";
        }
        return result;  
    }

    console.log(testElse(4));   // 5 or smaller

------------------------------------------- Else if statements

    function testElseIf(val) {
        if (val > 10) {
            return "Greater than 10";
        } else if (val < 5) {
            return "Smaller than 5";
        } else {
            return "Between 5 and 10";  
        }
    }

    console.log(testElseIf(7));   // Between 5 and 10

------------------------------------------- Logical Order in if else statements

function testElseIf(val) {
    /** the order of the conditions matters as long as the first condition
	 of the if is met, it doesnt check the other conditions */

    if (val < 5) {
        return "Less than 5";
    } else if (val < 10) {
        return "Less than 10";
    } else {
        return "Greater than or equal to 10";  
    }
}

console.log(testElseIf(3));   // Less than 5

-------------------------------------------  Chaining if else statements

    function testSize(num) {
        if (num < 5) {
            return "Tiny";
        } else if (num < 10) {
            return "Small";
        } else if (num < 15) {
            return "Medium";
        } else if (num < 20) {
            return "Large";
        } else {
            return "Huge";
        }
    }

    console.log(testSize(19));   // Large

------------------------------------------- Golf code

    var names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];

    function golfScore(par, strokes) {
        if (strokes == 1) {
            return names[0];
        } else if (strokes <= par - 2) {
            return names[1];
        } else if (strokes == par - 1) {
            return names[2];
        } else if (strokes == par) {
            return names[3];
        } else if (strokes == par + 1) {
            return names[4];
        } else if (strokes == par + 2) {
            return names[5];
        } else if (strokes >= par + 3) {
            return names[6];
        }
    }

    console.log(golfScore(5, 4));   // Birdie
    console.log(golfScore(5, 2));   // Eagle
    console.log(golfScore(5, 8));   // Go home

------------------------------------------- Switch statements

    function caseInSwitch(val) {
        var answer = "";

        switch (val) {
            case 1:     // cases use strictly equality operator "==="
                answer = "Alpha";
                break;
            case 2:
                answer = "Beta";
                break;
            case 3:
                answer = "Gamma";
                break;
            case 4:
                answer = "Delta";
                break;
            default:
                answer = "Try again";
        }
        return answer;
    }

    console.log(caseInSwitch(1));       // Alpha
    console.log(caseInSwitch(2));       // Beta
    console.log(caseInSwitch(3));       // Gamma
    console.log(caseInSwitch(4));       // Delta
    console.log(caseInSwitch(5));       // Try again
    console.log(caseInSwitch(10));       // Try again

------------------------------------------- Default option in switch statements

    function caseInSwitch(val) {
        var answer = "";

        switch (val) {
            case "a":     // cases use strictly equality operator "==="
                answer = "apple";
                break;
            case "b":
                answer = "banana";
                break;
            case "c":
                answer = "cocoonut";
                break;
            default:
                answer = "Try again";
        }
        return answer;
    }

    console.log(caseInSwitch("a"));       // appla
    console.log(caseInSwitch("b"));       // banana
    console.log(caseInSwitch("C"));       // Try again
    console.log(caseInSwitch("d"));       // Try again
    console.log(caseInSwitch(2));       // Try again

------------------------------------------- Multiple identical options in switch statements

    function sequentialSizes(val) {
        var answer = "";

        switch (val) {
            case 1:
            case 2:
            case 3:
                answer = "Low";
                break;
            case 4:
            case 5:
            case 6:
                answer = "Mid";
                break;
            case 7:
            case 8:
            case 9:
                answer = "High";
                break;
            default:
                answer = "Try again";
        }
        return answer;
    }

    console.log(sequentialSizes(1));       // Low
    console.log(sequentialSizes(3));       // Low
    console.log(sequentialSizes(6));       // Mid
    console.log(sequentialSizes(9));       // High
    console.log(sequentialSizes(10));       // Try again

------------------------------------------- Replacing if else chains with switch

    function chainToSwitch(val) {
        var answer = "";

        switch (val) {
            case "bob":
                answer = "Marley";
                break;
            case 42:
                answer = "The answer";
                break;
            case 1:
                answer = "There is no #1";
                break;
            case 99:
                answer = "Missed me by this much!";
                break;
            case 7:
                answer = "Ate Nine";
                break;
            default:
                answer = "Try again";
        }
        return answer;
    }

    console.log(chainToSwitch("z"));       // Try again
    console.log(chainToSwitch(12));       // Try again
    
------------------------------------------- Returning boolean values from functions

    function isLess(a, b) {
        return a < b;
    }

    console.log(isLess(10, 15));    // true

------------------------------------------- Returning early pattern from functions

    function abTest(a, b) {
        
        if (a < 0 || b < 0) {
            return undefined
        }

        return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2))
    }

    console.log(abTest(2, 2));  // 8
    console.log(abTest(-2, 2));  // undefined

------------------------------------------- Counting cards

    var count = 0;    

    function cc(card) {

        switch (card) {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                count++;
                break;
            case 10:
            case "J":
            case "Q":
            case "K":
            case "A":
                count--;
                break;
        }

        var holdBet = "Hold";

        if (count > 0) {
            holdBet = "Bet";
        } 

        return "Count is: " + count + ", State is: " + holdBet;
    }

    cc(2); cc(3); cc(7); cc('K'); cc('A'); 
    console.log(cc(4));     // Count is: 1, State is: Bet
    cc(2); cc('K'); cc(10); cc('K'); cc('A'); 
    console.log(cc(4));    //  Count is: -1, State is: Hold
    // supposed to be Count is: -2, State is: Hold

------------------------------------------- Build javascript projects

    // objects

    var ourDog = {
        "name": "Camper",
        "legs": 4,
        "tails": 1,
        "freinds": ["everything!"]
    };

    var myDog = {
        "name": "Quincy",
        "legs": 3,
        "tails": 2,
        "freinds": []
    };

------------------------------------------- Acessing object properties with dot notation

    var testObj = {
        // {"property"}: {"value"}

        "hat": "ballcap",
        "shirt": "jersey",
        "shoes": "cleats"
    };
    
    var hatValue = testObj.hat;
    var shirtValue = testObj.shirt;

    console.log(hatValue);      // ballcap
    console.log(shirtValue);        // jersey

------------------------------------------- Acessing object properties with bracket notation

    var testObj = {
        // bracket nottaion works well when the property has a space in it

        "an entree": "hamburger",
        "my shirt": "veggies",
        "the drink": "water"
    };
    
    var entreeValue = testObj["an entree"];
    var drinkValue = testObj['the drink'];

    console.log(entreeValue);      // hamburger
    console.log(drinkValue);        // water

------------------------------------------- Accesing object properties with variables

    var testObj = {
        12: "Namath",
        16: "Montana",
        19: "Unitas"
    };
    
    var playerNumber = 16;
    var player = testObj[playerNumber];
 
    console.log(player);    // Montana
 
------------------------------------------- Upadating object properties

    var ourDog = {
        "name": "Camper",
        "legs": 4,
        "tails": 1,
        "freinds": ["everything!"]
    };
    ourDog.name = "Happy Camper"

    var myDog = {
        "name": "Quincy",
        "legs": 3,
        "tails": 2,
        "freinds": ["freeCodeCamp Campers"]
    };
    myDog.name = "Happy Quincy"

    console.log(myDog.name)

------------------------------------------- Add new properties to an object

    var ourDog = {
        "name": "Camper",
        "legs": 4,
        "tails": 1,
        "freinds": ["everything!"]
    };
    ourDog.bark = "bow-wow";

    var myDog = {
        "name": "Quincy",
        "legs": 3,
        "tails": 2,
        "freinds": ["freeCodeCamp Campers"]
    };
    myDog['bark'] = "woof!";

    console.log(myDog);

------------------------------------------- Deleting properties from an object

    var ourDog = {
        "name": "Camper",
        "legs": 4,
        "tails": 1,
        "freinds": ["everything!"],
        "bark": "bow-wow"
    };
    delete ourDog.bark;
    
    var myDog = {
        "name": "Quincy",
        "legs": 3,
        "tails": 2,
        "freinds": ["freeCodeCamp Campers"],
        "bark": "woof!"
    };
    delete myDog.tails;

    console.log(myDog);

------------------------------------------- Using object for lookups

    function phoneticLookup(val) {
        var result = "";

        var lookup = {
            "alpha": "Adams",
            "bravo": "Boston",
            "charlie": "Chicago",
            "delta": "Denver",
            "echo": "Easy",
            "foxtrot": "Frank"
        };
        result = lookup[val];
        return result;
    }

    console.log(phoneticLookup("alpha"));   // Adams

------------------------------------------- Testing objects for properties

    var myObj = {
        gift: "pony",
        pet: "kitten",
        bed: "sleigh"
    };

    function checkObj(checkProp) {
        
        if (myObj.hasOwnProperty(checkProp)) {
            return myObj[checkProp];
        } else {
            return "Not found";
        }
    }

    console.log(checkObj("gift"));   // pony
    console.log(checkObj("hello"));   // Not found

------------------------------------------- Manipulating complex odjects

    var myMusic = [
        {
            "artist": "Billy Joel",
            "title": "Piano Man",
            "release_year": 1973,
            "formats": [
                "CD",
                "8T",
                "LP"
            ],
            "gold": true
        },
            // Add
        {
            "artist": "Beau Carnes",
            "title": "Cereal Man",
            "release_year": 2003,
            "formats": [
                "YouTube video"
            ]
        }
    ];

------------------------------------------- Accessing nested objects

    var myStorage = {
        "car": {
            "inside": {
                "glove box": "maps",
                "passenger seat": "crumbs"
            },
            "outside": {
                "trunk": "jack"
            }
        }
    };

    var gloveBoxContents = myStorage.car.inside["glove box"];
    console.log(gloveBoxContents);      // maps

------------------------------------------- Acessing nested arrays

    var myPlants = [
        {
            type: "flowers",
            list: [
                "rose",
                "tulip",
                "dandelion"
            ]
        },
        {
            type: "trees",
            list: [
                "fir",
                "pine",
                "birch"
            ]
        }
    ];

    var secondTree = myPlants[1].list[1];
    console.log(secondTree);      // pine

------------------------------------------- Record collection

    var collection = {
        "2548": {
            "album": "Slippery when wet",
            "artist": "Bon Jovi",
            "tracks": [
                "Let it rock",
                "You give love a bad name"
            ]
        },
        "2468": {
            "album": "1999",
            "artist": "Prince",
            "tracks": [
                "1999",
                "Little red corvette"
            ]
        },
        "1245": {
            "artist": "Robert Palmer",
            "tracks": []
        },
        "5439": {
            "album": "ABBA Gold",
        },
    };

    var collectionCopy = JSON.parse(JSON.stringify(collection));

    function updateRecords(id, prop, value) {

        if (value === "") {
            delete collection[id][prop];
        } else if (prop === "tracks") {
            collection[id][prop] = collection[id][prop] || [];
            collection[id][prop].push(value);
        } else {
            collection[id][prop] = value;
        }
        return collection[id];     // unitarilly added "[id]"
    }

    updateRecords(2468, "tracks", "test");
    console.log(updateRecords(5439, "artist", "ABBA"));

------------------------------------------- Iterate with while loops

    var myArray = [];

    var i = 0;
    while(i < 5) {
        myArray.push(i);
        i++;
    }

    console.log(myArray);   // [ 0, 1, 2, 3, 4 ]

------------------------------------------- Iterate with for loops

    var ourArray = [];

    for (var i = 0; i < 5; i++) {
        ourArray.push(i);
    }

    console.log(ourArray);      // [ 0, 1, 2, 3, 4 ]

///////////////////////////////////////////////////////////////////////////////

    var myArray = [];

    for (var i = 1; i <= 5; i++) {
        myArray.push(i);
    }

    console.log(myArray);       // [ 1, 2, 3, 4, 5 ]

------------------------------------------- Iterate odd numbers with for loop

    var ourArray = [];

    for (var i = 0; i < 10; i++) {
        if (i % 2 !== 0) {
            ourArray.push(i);
        }
    }

    console.log(ourArray); 	 // [ 1, 3, 5, 7, 9 ]

///////////////////////////////////////////////////////////////////////////////

    var ourArray = [];

    for (var i = 1; i < 10; i += 2) {
        ourArray.push(i);
    }

    console.log(ourArray);      // [ 1, 3, 5, 7, 9 ]

------------------------------------------- Iterate even numbers with for loop

    var ourArray = [];

    for (var i = 0; i < 10; i++) {
        if (i % 2 === 0) {
            ourArray.push(i);
        }
    }

    console.log(ourArray);  // [ 0, 2, 4, 6, 8 ]

///////////////////////////////////////////////////////////////////////////////

    var ourArray = [];

    for (var i = 0; i < 10; i += 2) {
        ourArray.push(i);
    }

    console.log(ourArray);  // [ 0, 2, 4, 6, 8 ]

------------------------------------------- Count bakwards with a for loop

    // even numbers in reverse
    var ourArray = [];

    for (var i = 10; i > 0; i -= 2) {
        ourArray.push(i);
    }

    console.log(ourArray);      // [ 10, 8, 6, 4, 2 ]

    ///////////////////////////////////////////////////////////////////////////////

    // odd numbers in reverse
    var myArray = [];
 
    for (var i = 9; i > 0; i -= 2) {
        myArray.push(i);
    }

    console.log(myArray);      // [ 9, 7, 5, 3, 1 ]

------------------------------------------- Iterate through an array with a for loop

    var ourArr = [9, 10, 11, 12];
    var ourTotal = 0;

    for ( var i = 0; i < ourArr.length; i++) {
        ourTotal += ourArr[i];
    }

    console.log(ourTotal);      // 42

    ///////////////////////////////////////////////////////////////////////////////

    var myArr = [2, 3, 4, 5, 6];
    var myTotal = 0;

    for (var i = 0; i < myArr.length; i++) {
        myTotal += myArr[i];
    }

    console.log(myTotal);       // 20

------------------------------------------- Nesting for loops

    function multiplyAll(arr) {
        var product = 1;

        for (var i = 0; i < arr.length; i++) {
            for (var j = 0; j < arr[i].length; j++) {
                product *= arr[i][j];
            }
        }
        return product;
    }

    var product = multiplyAll([[1,2], [3,4], [5,6,7]]);
    console.log(product);       // 5040

------------------------------------------- Iterate with do... while loops

    var myArray = [];
    var i = 10;

    while (i < 5) {
        myArray.push(i);
        i++;
    }
    console.log(i, myArray);    // 10 []
    
    // do while loop will first run the code, then check the condition
    
    do {
        myArray.push(i);
        i++;
    } while (i < 5); 
    
    console.log(i, myArray);    // 11 [ 10 ]

------------------------------------------- Profile lookup

     var contacts = [
        {
            "firstName": "Akira",
            "lastName": "Akira",
            "number": "0543236543",
            "likes": ["Pizza", "Coding", "Brownie Points"]
        },
        {
            "firstName": "Harry",
            "lastName": "Potter",
            "number": "0994372684",
            "likes": ["Hogwarts", "Magic", "Hagrid"]
        },
        {
            "firstName": "Sherlock",
            "lastName": "Holmes",
            "number": "0487345643",
            "likes": ["Intriguing", "Violin"]
        },
        {
            "firstName": "Kristian",
            "lastName": "Vos", 
            "number": "Unknown",
            "likes": ["Javascript", "Gaming", "Foxes"]
        },
     ];

     function lookUpProfile(name, prop) {        
        for (var i = 0; i < contacts.length; i++) {
            if (contacts[i].firstName === name) {
                return contacts[i][prop] || "No such property";
            }
        }
        return "No such contacts";
     }

     var data = lookUpProfile("Akira", "likes");    // [ 'Pizza', 'Coding', 'Brownie Points' ]
     var data = lookUpProfile("Sherlock", "lastName")   // Holmes
     console.log(data);

------------------------------------------- Generate random fractions

    function randomFraction() {

        return Math.random();
    }

    console.log(randomFraction());
    // return number between 0 and 1 but can't be 1

------------------------------------------- Generate randon whole numbers

    var randomNumberBetween0and19 = Math.floor(Math.random() * 20);
    // return a random number betwween 0 and 19

    console.log(randomNumberBetween0and19);

    function randomWholeNum() {
        
        return Math.floor(Math.random() * 10);
    }

    console.log(randomWholeNum());
    // return a random number betwween 0 and 9

------------------------------------------- Generate random whole numbers with in a range

    function ourRandomRange(ourMin, ourMax) {

        return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;
    }

    var rand = ourRandomRange(1, 3);
    // min are max numbers are inclusive
    console.log(rand);
    
    ///////////////////////////////////////////////////////////////////////////////
    
    function randomRange(myMin, myMax) {
        
        return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
    }
    
    var myRandom = randomRange(13, 15);
    console.log(myRandom);

------------------------------------------- Use the parseInt function

    // parseInt takes a string and returns an integers
    //if a string can't be converted to an interger, it returns NaN

    function convertToInteger(str) {

        return parseInt(str);
    }

    var int = convertToInteger("boy");  // NaN -> Not a Number  
    var int = convertToInteger("56");
    console.log(int);       // 56

------------------------------------------- Use the parseInt function with a radix

    // radix specifies the base of the number in the string

    function convertToInteger(str) {

        return parseInt(str, 2);    // 2 for base 2
    }

    var binary = convertToInteger("10011");
    console.log(binary);    // 19

------------------------------------------- Use the conditional (Ternary) operator

    function checkEqual(a, b) {

        return a === b ? true : false;    // never type this, its just to demonstrate the ternary operator

        // return a === b;    // same as above
    }

    console.log(checkEqual(1, 2));

------------------------------------------- Use multiple conditional (ternary) operations

    function checkSign(num) {

        return num > 0 ? "Postive" : num < 0 ? "Negative" : "Zero";
    }

    console.log(checkSign(10));
    console.log(checkSign(0));
    console.log(checkSign(-5));

------------------------------------------- Difference between the var and let keywords

    // "let" doesn't let you declare a variable twice

    // var catName = "Quincy";
    // var quote;
    // var catName = "Beau";

    // function catTalk() {
    //     "use strict";    // enables 'strict mode' which catches common coding mistakes and unsafe actions
    //     catName = "Oliver";
    //     quote = catName + " says Meow!";
    //     return quote;
    // }

    // console.log(catTalk());     // Oliver says Meow!

///////////////////////////////////////////////////////////////////////////////

    let catName = "Quincy";
    let quote;
    catName = "Beau";

    function catTalk() {
        "use strict";   // enables 'strict mode' which catches common coding mistakes and unsafe actions

        catName = "Oliver";
        quote = catName + " says Meow!";
        return quote;
    }

    console.log(catTalk());     // Oliver says Meow!

------------------------------------------- Compare scopes of the var and let keywords

    function checkScope() {
        "use strict";
        var i = "function scope";
        if (true) {
            var i = "block scope";
            console.log("Block scope i is: ", i);
        }
        console.log("Function scope i is: ", i);
        return i;
    }

    console.log(checkScope());
	//     Block scope i is:  block scope
	//     Function scope i is:  block scope
	//     block scope

///////////////////////////////////////////////////////////////////////////////

    // function checkScope() {
    //     "use strict";
    //     let i = "function scope";
    //     if (true) {
    //         let i = "block scope";
    //         console.log("Block scope i is: ", i);
    //     }
    //     console.log("Function scope i is: ", i);
    //     return i;
    // }

    // console.log(checkScope());
    // Block scope i is:  block scope
    // Function scope i is:  function scope
    // function scope

	-----    

    // if (true) {
    //     var i = "block scope";
    //     console.log("Block scope i is: ", i);
    // }
    // console.log("Function scope i is: ", i);
    // // Block scope i is:  block scope
    // // Function scope i is:  block scope
    // // block scope

	-----
    
    // if (true) {
    //     let i = "block scope";
    //     console.log("Block scope i is: ", i);
    // }
    // console.log("Function scope i is: ", i);
    // // Block scope i is:  block scope
    // // Function scope i is:  undefined
    // // undefined

------------------------------------------- Declare a read-only variable with the const keyword

    function printManyTimes(str) {
        "use strict";

        const SENTENCE = str + " is cool!"

        for (let i = 0; i < str.length; i += 2) {
            console.log((SENTENCE));
        }
        return SENTENCE;
    }
    let printed = printManyTimes("freeCodeCamp");
    console.log(printed);

------------------------------------------- Mutate an array declared with const

    const s = [5, 7, 2];

    function editInPlace() {
        "use strict";
        
        s[0] = 3;
        s[1] = 0;
        s[2] = "Mutants";
        s[3] = 7;
        return s;
    }

    console.log(editInPlace());     // [ 3, 0, 'Mutants', 7 ]

------------------------------------------- Prevent object mutation

    function freezObj() {
        "use strict";

        const MATH_CONSTANT = {
            PI: 3.14
        };

        Object.freeze(MATH_CONSTANT);
        // prevents changing of items in an object

        try {
            MATH_CONSTANT.PI = 99;
        } catch(ex) {
            console.log(ex);
        }
        return MATH_CONSTANT.PI;
    }

    const PI = freezObj();      // TypeError...

------------------------------------------- Use arrow functions to write concise anonymous functions

    // An anonymous function because it doesn't have a name
    var magic = function() {
        return new Date();
    };

    // --- Arrow function from the above
     const magic = () => new Date();

------------------------------------------- Write arrow functions with parameters

    // var myConcat = function(arr1, arr2) {
    //     return arr1.concat(arr2);
    // };

    // console.log(myConcat([1,2], [3,4,5]));
    
    // --- Arrow function
    const myConcat = (arr1, arr2) => arr1.concat(arr2);
    console.log(myConcat([1,2], [3,4,5]));	// [ 1, 2, 3, 4, 5 ]

------------------------------------------- Write higher order arrow functions

    // compute the square of only the positive integers in the array

    const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2]

    const squareList = (arr) => {
        const squareIntegers = arr.filter(num => Number.isInteger(num) && num > 0).map(x => x * x);
        return squareIntegers;
    };

    const squareIntegers = squareList(realNumberArray);
    console.log(squareIntegers); 

------------------------------------------- Write higher order arrow functions with default parameters

    const increment = (function() {
        return function increment(number, value = 1) {
            return number + value;
        };
    })();
    
    console.log(increment(5, 2));       // 7
    // the 2 is for increment
    console.log(increment(5));      // 6
    // initaially increments was set to 1

///////////////////////////////////////////////////////////////////////////////

    const increment = (number, value = 1) => number + value;

    console.log(increment(5, 2));       // 7
    console.log(increment(5));      // 6

------------------------------------------- Use the rest operator with function parameters

    // rest operator allows you to create a function that takes a variable number of arguments (...)

    // const sum = (function() {
    //     return function sum(x, y, z) {
    //         const args = [x, y, z];
    //         return args.reduce((a, b) => a + b, 0);
    //     };
    // })();

    // console.log(sum(1, 2, 3));      // 6

    
    const sum = (function() {
        return function sum(...args) {
            return args.reduce((a, b) => a + b, 0);
        };
    })();

    console.log(sum(1, 2, 3));      // 6
    console.log(sum(1, 2, 3, 4));      // 10
    console.log(sum(1, 2, 3, 4, 5, 6, 7, 8, 9));    // 45

------------------------------------------- Use the spread operator to evaluate arrays in-place

    const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
    let arr2;
    (function() {
        arr2 = [...arr1];
        arr1[0] = 'potato';
    })();

    console.log(arr1);      // [ 'potato', 'FEB', 'MAR', 'APR', 'MAY' ]
    console.log(arr2);      // [ 'JAN', 'FEB', 'MAR', 'APR', 'MAY' ]

------------------------------------------- Use destructuring assignment to assign variables from objects

    var voxel = {x: 3.6, y: 7.4, z: 6.54};

    var x = voxel.x;    // 3.6
    var y = voxel.y;    // 7.4
    var z = voxel.z;    // 6.54

    const {x : a, y : b, z : c} = voxel;
    console.log(voxel);     // { x: 3.6, y: 7.4, z: 6.54 }

///////////////////////////////////////////////////////////////////////////////

    const AVG_TEMPERATURES = {
        today: 77.5,
        tomorrow: 79
    };

    function getTempOfTmrw(avgTemperatures) {
        "use strict";

        const {tomorrow : tempOfTomorrow} = avgTemperatures;
        return tempOfTomorrow;
    }

    console.log(getTempOfTmrw(AVG_TEMPERATURES));   // 79

------------------------------------------- Destructuring assignment with nested objects

    const LOCAL_FORECAST = {
        today: {min: 72, max: 83},
        tomorrow: {min: 73.3, max: 84.6},
    };

    function getMaxOfTmrw(forecast) {
        "use strict";

        const {tomorrow : {max : maxOfTomorrow}} = forecast;
        return maxOfTomorrow;
    }

    console.log(getMaxOfTmrw(LOCAL_FORECAST));  //84.6

------------------------------------------- Use destructuring assignment to assign variables from arrays

    const [z, x, ,y] = [1, 2, 3, 3, 5, 6];
    console.log(z, x, y);   // 1 2 3

    // switching places of variables
    let a = 8, b = 6;
    (() => { 
        "use strict";
        [a, b] = [b, a];
    })();

    console.log(a);     // 6
    console.log(b);     // 8

------------------------------------------- Use destructuring assignment with the rest operator

    const source = [1,2,3,4,5,6,7,8,9,10];

    function removeFirstTwo(list) {
        
        const [ , , ...arr] = list;
        return arr;
    }
    const arr = removeFirstTwo(source);    
    console.log(arr);       // [3, 4, 5, 6, 7, 8, 9, 10]
    console.log(source);    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

------------------------------------------- Use destructuring assignment to pass an object as a function's parameters

    const stats = {
        max: 56.78,
        standard_deviation: 4.34,
        median: 34.54,
        mode: 23.87,
        min: -0.75,
        average: 35.85
    };
    
    const half = (function() {
        return function half({max, min}) {
            return (max + min) / 2.0;
        };
    })();

    // console.log(stats);
    console.log(half(stats));   // 28.015

------------------------------------------- Create string using template literals

    const person = {
        name: "Zodiac Hasbro",
        age: 56
    };

    const greeting = `Hello, my name is ${person.name}!
    I am ${person.age} years old.`;

    console.log(greeting);
    // Hello, my name is Zodiac Hasbro!
    // I am 56 years old.

    // puts a new line even without the escape sequence

//////////////////////////////////////////////////////////////////////////////

    const result = {
        success: ["max-length", "no-amd", "prefer-arrow-functions"],
        failure: ["no-var", "var-on-top", "linebreak"],
        skipped: ["id-blacklist", "no-dup-keys"]
    };

    function makeList(arr) {
        const resultDisplayArray = [];
        for(let i = 0; i < arr.length; i++) {
            resultDisplayArray.push(`<li class="text-warning">${arr[i]}</li>`)
        };

        return resultDisplayArray;
    }

    const resultDisplayArray = makeList(result.failure);
    console.log(resultDisplayArray);
    // [
    //     '<li class="text-warning">no-var</li>',
    //     '<li class="text-warning">var-on-top</li>',
    //     '<li class="text-warning">linebreak</li>'
    // ]

------------------------------------------- Write concise object literal declarations using simple fields

    // // Conventinal way
    // const createPerson = (name, age, gender) => {

    //     return {
    //         name: name,
    //         age: age,
    //         gender: gender
    //     };
    // };
    // console.log(createPerson("Zodiac Hasbro", 56, "Male"));
    
    // --- Equvalent way
    const createPerson = (name, age, gender) => ({name, age, gender});
    console.log(createPerson("Zodiac Hasbro", 56, "Male"));
    // { name: 'Zodiac Hasbro', age: 56, gender: 'Male' }

------------------------------------------- Write concise declarative functions

    // const bicycle = {
    //     gear: 2,
    //     setGear: function(newGear) {
    //         "use strict";
    //         this.gear = newGear;
    //     }
    // };
    
    // --- the approprite way
    const bicycle = {
        gear: 2,
        setGear (newGear) {
            "use strict";
            this.gear = newGear;
        }
    };

    bicycle.setGear(3);
    console.log(bicycle.gear);      // 3

------------------------------------------- Use class syntax to define a constructor function

    // class SpaceShuttle {
    //     constructor(targetPlanet) {
    //         this.targetPlanet = targetPlanet;
    //     }
    // }

    // var zeus = new SpaceShuttle('Jupiter');
    // console.log(zeus.targetPlanet);     // Jupiter

///////////////////////////////////////////////////////////////////////////////

    function makeClass() {
        class Vegetable {
            constructor(name) {
                this.name = name;
            }
        }
        return Vegetable;
    }

    const Vegetable = makeClass();
    const carrot = new Vegetable('Carr0t');
    console.log(carrot.name);       // Carr0t

------------------------------------------- Use getters and setters to control access to an object

    function makeClass() {
        class Book {
            constructor(author) {
                this._author = author;
            }
        
            get writer() {
                return this._author;
            }
        
            set writer(updatedAuthor) {
                this._author = updatedAuthor;
            }
        }
        return Book;
    }

    const Book = makeClass();
    const benja = new Book("Mugabi Benjamin");
    let ben = benja.writer;
    ben = "M_Benjn";
    console.log(ben);   // M_Benjn
    
    ///////////////////////////////////////////////////////////////////////////////
    
    function makeClass() {
        class Thermostat {
            constructor(temp) {
                this._temp = 5/9 * (temp - 32);
            }   // "_" means its a private variable that shouldn't be accessed outside that scope or class

            get temperature(){
                return this._temp;
            }

            set temperature(updatedTemp) {
                this._temp = updatedTemp;
            }
        }
        return Thermostat;
    }

    const Thermostat = makeClass();
    const thermos = new Thermostat(76);
    let temp =  thermos.temperature;    // access get temperature()
    thermos.temperature = 26;
    temp = thermos.temperature;
    console.log(temp);      // 26

------------------------------------------- Understanding the difference between import and export

    import {capitlizeString} from "./string_function"
    const cap = capitlizeString("hello!");

    console.log(cap);     // HELLO!

    // from another js file named string_function in the same directory
    // export const capitalizeString = str => str.toUpperCase();

------------------------------------------- Use export to reuse a code block

    const capitalizeString = (string) => {
        return string.charAt(0).toUpperCase + string.slice(1);
    }

    export { capitalizeString };

    export const foo = "bar";
    export const doo = "foo";

------------------------------------------- Use * to import everything from a file

    import * as capitalizeString from "capitalize_string";
    
    // capitalizeString can be any object name that you create
    // "./capitalize_string" if in same directory

------------------------------------------- Create an export fallback with export default

    // Used if you want to export one thing from a file
    export default function subtract(x, y)  {return x - y;}

------------------------------------------- Import a default export

    // default export don't {}
    import subtract from "math_functions"

    subtract(7, 4);

------------------------------------------- END 
-------------------------------------------
-------------------------------------------